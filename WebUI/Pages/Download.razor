@page "/Download"
@using Anthology.WebUI.Components.Elements
@using Anthology.WebUI.Components.Modals
@using Anthology.Data
@using Anthology.Plugins.Models

@inject Anthology.Services.IDownloadService _downloadService
@inject Anthology.Services.IBookService _bookService
@inject MudBlazor.ISnackbar _snackBar
@inject MudBlazor.IDialogService _dialog

<PageTitle>Books</PageTitle>

<MudPaper Elevation="25">
    <MudToolBar>
    </MudToolBar>
</MudPaper>
@if (DownloadList == null || BookList == null)
{
    <LoadingIndicator />
}
else
{
    <MudGrid>
        @foreach (var downloadItem in DownloadList.Select(d => new DownloadItem(d, BookList)))
        {
            <BookCard T="Plugins.Models.Download" Text1="@downloadItem.Title" Text2="@downloadItem.Author" Text3="@downloadItem.Series" CoverURL="@downloadItem.Cover" ShowStatus="@downloadItem.IsImported" Status="@downloadItem.IsInLibrary" ButtonItem="@downloadItem.Download" ButtonText="Download" ButtonAction="@DownloadBook" SecondButtonText="@downloadItem.SecondButtonText" SecondButtonAction="@ShowMatchToBookDialog" />
        }
    </MudGrid>
}

@code
{
    List<Plugins.Models.Download> DownloadList { get; set; }
    List<Data.Book> BookList { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadData();

        }
    }

    async Task LoadData()
    {
        DownloadList = await _downloadService.GetDownloadList();
        BookList = await _bookService.GetBooksWithStatusAsync();
        StateHasChanged();
    }

    static Book? getLinkedBook(Plugins.Models.Download download, List<Data.Book> bookList)
    {
        return bookList.FirstOrDefault(b => b.Identifiers.Any(i => i.Key == download.Key && i.Value == download.Identifier));
    }

    void DownloadBook(Plugins.Models.Download download)
    {
        if (getLinkedBook(download, BookList) == null)
        {
            ShowAddEditBookDialog(download);
        }
        else
        {
            var book = BookList.First(b => b.Identifiers.Any(i => i.Key == download.Key && i.Value == download.Identifier));
            book.Identifiers.Add(new BookIdentifier(download.Key, download.Identifier));
            _bookService.SaveBook(book);
            Task.Run(() => StartBookDownload(download));
        }
    }

    async Task StartBookDownload(Plugins.Models.Download download)
    {
        await _downloadService.DownloadBook(download);

        await LoadData();
    }

    async Task ShowAddEditBookDialog(Plugins.Models.Download download)
    {
        var book = new Book()
        {
            Identifiers = new List<BookIdentifier>()
            {
                new BookIdentifier(download.Key, download.Identifier)
            },
            BookMetadata = new Metadata()
            {
                Title = download.Title,
                Authors = download.Author,
                Covers = new List<string>(){ download.ImageURL }
            }
        };

        var parameters = new DialogParameters { ["Book"] = book, ["IsNewBook"] = true, ["BookService"] = _bookService };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };

        var dialog = await _dialog.ShowAsync<AddEditBook>("Download Book", parameters, options);
        var result = await dialog.Result;

        if (result != null && (string)result.Data == "Added") Task.Run(() => StartBookDownload(download));
    }

    async Task ShowMatchToBookDialog(Plugins.Models.Download download)
    {
        var searchQuery = download.Title + (download.Author.Count() != 0 ? " " + string.Join(" ", download.Author) : null);
        var parameters = new DialogParameters { ["BookList"] = BookList, ["SearchQuery"] = searchQuery };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, NoHeader = true };

        var dialog = await _dialog.ShowAsync<MatchToBook>("Match Book", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            var book = (Data.Book)result.Data;
            if (book.Identifiers.Any(i => i.Key == download.Key)) book.Identifiers.First(i => i.Key == download.Key).Value = download.Identifier;
            else book.Identifiers.Add(new BookIdentifier(download.Key, download.Identifier));
            _bookService.SaveBook(book);

            StateHasChanged();
        }
    }

    class DownloadItem
    {
        public Book? Book { get; set; }
        public Plugins.Models.Download Download { get; set; }
        public bool IsImported { get; set; }
        public bool IsInLibrary { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public string Series { get; set; }
        public string Cover { get; set; }
        public string SecondButtonText => IsImported ? null : "Match";

        public DownloadItem(Plugins.Models.Download download, List<Data.Book> bookList)
        {
            Book = getLinkedBook(download, bookList);
            Download = download;
            IsImported = Book != null;
            IsInLibrary = Book?.ExistsInLibrary ?? false;

            Title = Book != null ? (string.IsNullOrWhiteSpace(Book.Title) ? Book.BookMetadata.Title : Book.Title) : download.Title;
            Author = Book != null ? (Book.Authors.Count == 0 ? string.Join(", ", Book.BookMetadata.Authors) : string.Join(", ", Book.Authors)) : string.Join(", ", download.Author);
            Series = Book != null ? (Book.Series.Count == 0 ? string.Join(", ", Book.BookMetadata.Series.Select(s => s.Name + (string.IsNullOrWhiteSpace(s.VolumeNumber) ? "" : " #" + s.VolumeNumber))) : string.Join(", ", Book.Series.Select(s => s.Series.Name + (string.IsNullOrWhiteSpace(s.Sequence) ? "" : " #" + s.Sequence)))) : null;
            Cover = Book != null ? (Book.BookCovers.Count == 0 ? Book.BookMetadata.Covers.First() : Book.BookCovers.First().GetUrl()) : download.ImageURL;
        }

    }
}
