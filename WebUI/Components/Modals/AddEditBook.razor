@using Anthology.WebUI.Components.Modals.AddEditBookTabs
@using Anthology.Services
@using Anthology.Data
@using Microsoft.EntityFrameworkCore.Diagnostics
@using Anthology.WebUI.Components.Elements

@inject Anthology.Services.IPluginsService _pluginsService
@inject Anthology.Services.IClassificationService _classificationService
@inject Anthology.Services.IPersonService _personService
@inject Anthology.Services.ISeriesService _seriesService
@inject Anthology.Services.IMetadataService _metadataService
@inject MudBlazor.ISnackbar _snackBar

<style>
    .add-edit-book-dialog .mud-dialog-content {
        padding: 0px 0px !important;
    }
    .add-edit-book-dialog .mud-dialog-actions {
        box-shadow: 0px -2px 1px -1px rgba(0, 0, 0, 0.2), 0px -1px 1px 0px rgba(0, 0, 0, 0.14), 0px -1px 3px 0px rgba(0, 0, 0, 0.12);
    }
    .add-edit-book-dialog .tab-panel {
        max-height: 80vh;
        overflow-y: auto;
    }
</style>

@if (Loading)
{
    <MudDialog Class="add-edit-book-dialog">
        <DialogContent>
            <LoadingIndicator />
        </DialogContent>
    </MudDialog>
}
else
{
    <MudDialog Class="add-edit-book-dialog">
        <DialogContent>
            <MudTabs @ref="tabs" Elevation="1" Rounded="true" PanelClass="pa-6 tab-panel" DisableRipple="true">
                <MudTabPanel ID="@("DetailsTab")" Text="Details">
                    <Details @bind-Book="BookEdited" Classifications="Classifications" MetadataClassifications="MetadataClassifications" People="People" Series="Series" />
                </MudTabPanel>
                <MudTabPanel ID="@("CoversTab")" Text="Covers" Style="max-height: 80vh; overflow-y: auto;">
                    <Covers @bind-Book="BookEdited" @bind-NewBookCovers="NewBookCovers" @bind-NewAudiobookCovers="NewAudiobookCovers" @bind-CoversToDelete="ImagesToDelete" />
                </MudTabPanel>
                <MudTabPanel ID="@("ExtraImagesTab")" Text="Extra Images" Style="max-height: 80vh; overflow-y: auto;">
                    <MudText>Extra Images</MudText>
                    <ExtraImages @bind-Book="BookEdited" @bind-NewBookImages="NewBookImages" @bind-CoversToDelete="ImagesToDelete" />
                </MudTabPanel>
                <MudTabPanel ID="@("MatchTab")" Text="Match" Style="max-height: 80vh; overflow-y: auto;">
                    <MudText>Match</MudText>
                    <MatchBook @bind-Book="BookEdited" BookMatched="@MatchBook" />
                </MudTabPanel>
            </MudTabs>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Error" OnClick="DeleteBook">Delete Book</MudButton>
            <MudButton Color="Color.Primary" OnClick="RefreshMetadata">Refresh Metadata</MudButton>
            <MudButton Color="Color.Success" OnClick="SaveBook">@(IsNewBook ? "Add" : "Save") Book</MudButton>
        </DialogActions>
    </MudDialog>
}
@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    MudTabs tabs;

    bool Loading = true;

    [Parameter]
    public Data.Book Book { get; set; }

    Data.Book BookEdited { get; set; }

    public List<Classification> Classifications { get; set; }
    public List<Classification> MetadataClassifications { get; set; }

    List<Person> People { get; set; }

    List<Series> Series { get; set; }

    [Parameter]
    public bool IsNewBook { get; set; }

    [Parameter]
    public BookService BookService { get; set; }

    List<Data.TempImage> NewBookCovers { get; set; } = new();
    List<Data.TempImage> NewAudiobookCovers { get; set; } = new();
    List<Data.TempImage> NewBookImages { get; set; } = new();
    List<string> ImagesToDelete { get; set; } = new();

    bool RefreshedMetadata { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        BookEdited = Book.Clone();

        await GetIdentifiers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            LoadData();
        }
    }

    void MatchBook()
    {
        tabs.ActivatePanel("DetailsTab");
        RefreshMetadata();
    }

    private void Cancel() => MudDialog.Cancel();

    private void RefreshMetadata()
    {
        Loading = true;
        StateHasChanged();

        _metadataService.RefreshBookMetadata(BookEdited);
        RefreshedMetadata = true;
        LoadData();
    }

    private void DeleteBook()
    {
        BookService.DeleteBook(Book.ISBN);
        MudDialog.Close();
    }

    private void SaveBook()
    {
        bool IdentifiersChanged = false;
        if (Book.Identifiers.Count == BookEdited.Identifiers.Where(a => (string.IsNullOrWhiteSpace(a.Value) && a.Exists)).ToList().Count)
        {
            foreach (var identifier in Book.Identifiers)
            {
                var existingIdentifier = BookEdited.Identifiers.FirstOrDefault(i => i.Key == identifier.Key);
                if (existingIdentifier == null || !(existingIdentifier.Value == identifier.Value && existingIdentifier.Exists == identifier.Exists))
                {
                    IdentifiersChanged = true;
                    break;
                }
            }
        }
        ProcessImages();

        Book.Update(BookEdited);

        BookService.SaveBook(Book, IdentifiersChanged, IdentifiersChanged || RefreshedMetadata);
        _snackBar.Add("Book Saved", Severity.Success);

        if (IsNewBook) MudDialog.Close(DialogResult.Ok("Added"));
        else StateHasChanged();
    }

    private void ProcessImages()
    {
        // New Book Covers
        foreach (var tempImage in NewBookCovers.ToList())
        {
            var newFilename = Guid.NewGuid().ToString() + Path.GetExtension(tempImage.FileName);
            var cover = new BookCover() { Book = BookEdited, FileName = newFilename };
            if (BookEdited.BookCovers.Count == 0) cover.IsPrimary = true;
            Directory.CreateDirectory(Path.GetDirectoryName(cover.GetPath()));
            File.Move(tempImage.GetPath(), cover.GetPath());
            BookEdited.BookCovers.Add(cover);
            NewBookCovers.Remove(tempImage);
        }

        // New Audiobook Covers
        foreach (var tempImage in NewAudiobookCovers.ToList())
        {
            var newFilename = Guid.NewGuid().ToString() + Path.GetExtension(tempImage.FileName);
            var cover = new AudiobookCover() { Book = BookEdited, FileName = newFilename };
            if (BookEdited.AudiobookCovers.Count == 0) cover.IsPrimary = true;
            Directory.CreateDirectory(Path.GetDirectoryName(cover.GetPath()));
            File.Move(tempImage.GetPath(), cover.GetPath());
            BookEdited.AudiobookCovers.Add(cover);
            NewAudiobookCovers.Remove(tempImage);
        }

        // New Book Images
        foreach (var tempImage in NewBookImages.ToList())
        {
            var newFilename = Guid.NewGuid().ToString() + Path.GetExtension(tempImage.FileName);
            var cover = new BookImage() { Book = BookEdited, FileName = newFilename };
            Directory.CreateDirectory(Path.GetDirectoryName(cover.GetPath()));
            File.Move(tempImage.GetPath(), cover.GetPath());
            BookEdited.Images.Add(cover);
            NewBookImages.Remove(tempImage);
        }

        // Delete Images
        foreach (var imagePath in ImagesToDelete.ToList())
        {
            File.Delete(imagePath);
            ImagesToDelete.Remove(imagePath);
        }
    }

    async Task GetIdentifiers()
    {
        foreach (var identifier in _pluginsService.GetPluginList().Select(p => p.Identifier).Distinct().Where(p => !string.IsNullOrWhiteSpace(p)).OrderBy(i => i))
        {
            if (!BookEdited.Identifiers.Any(b => b.Key == identifier)) BookEdited.Identifiers.Add(new BookIdentifier(identifier, ""));
        }
    }

    async Task LoadData()
    {
        Loading = true;
        StateHasChanged();

        GetClassifications();
        GetPeople();
        GetSeries();

        Loading = false;
        StateHasChanged();
    }

    private void GetClassifications()
    {
        Classifications = _classificationService.GetAllClassifications(BookEdited.BookMetadata);
        MetadataClassifications = _classificationService.CleanClassification(
            Book.BookMetadata.Genres.Select(g => new Classification() { Name = g, Type = Classification.ClassificationType.Genre })
                .Concat(Book.BookMetadata.Tags.Select(t => new Classification() { Name = t, Type = Classification.ClassificationType.Tag })).ToList());
    }

    private void GetPeople()
    {
        People = _personService.GetAllPeople(BookEdited.BookMetadata);
    }

    private void GetSeries()
    {
        Series = _seriesService.GetAllSeries(BookEdited.BookMetadata);
    }
}
