@using Anthology.Data
@using Anthology.WebUI.Components.Modals

@inject MudBlazor.IDialogService _dialog

<style>
    .metadatamultiselect-container {
        padding: 8px 14px;
        width: 100%;
        max-width: 100%;
        height: 100%;
    }

        .metadatamultiselect-container .mud-chip button {
            display: none;
        }

        .metadatamultiselect-container .mud-chip:hover button {
            display: flex;
        }

        .metadatamultiselect-container .add-icon {
            padding: 0 2px !important;
        }

            .metadatamultiselect-container .add-icon svg {
                margin: 0px;
            }
</style>

<div class="mud-input-control mud-input-control-margin-dense mud-input-input-control metadatamultiselect">
    <div class="mud-input-control-input-container">
        <div class="mud-input mud-input-outlined mud-input-margin-dense mud-shrink">
            <div class="metadatamultiselect-container d-flex flex-wrap gap-2">
                @foreach (var selectedOption in SelectValue)
                {
                    var optionName = selectedOption.Series.Name +
                    (string.IsNullOrWhiteSpace(selectedOption.Sequence) ? "" : " #" + selectedOption.Sequence);
                    <MudChip Class="ma-0" Color="Color.Primary" Size="Size.Small" Text="@optionName"
                             Value="@selectedOption"
                             OnClick="@(() => ShowAddEditBookSeriesDialog(selectedOption))"
                             OnClose="RemoveSelectedOption" />
                }
                <MudChip Class="ma-0 add-icon" Color="Color.Primary" Size="Size.Small"
                         Icon="@Icons.Material.Filled.Add"
                         OnClick="@(() => ShowAddEditBookSeriesDialog())" />
            </div>
            <div class="mud-input-slot mud-input-root mud-input-root-outlined mud-input-root-margin-dense"
                 style="display: none" tabindex="-1"></div>
            <div class="mud-input-outlined-border"></div>
        </div>
        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined
                     mud-input-label-margin-dense mud-input-label-inputcontrol">@Label</label>
    </div>
    @if (!(_selectValue.Count == MetadataValue.Count &&
    _selectValue.All(s => MetadataValue.Any(m => m.Series.Name == s.Series.Name && m.Sequence == s.Sequence)))
    && _selectValue.Count != 0)
    {
        <div class="mud-input-control-helper-container px-2">
            <p class="mud-input-helper-text">
                <div class="d-flex">
                    <div class="me-auto">
                        @string.Join(", ", MetadataValue.Select(s =>
                                 s.Series.Name + (string.IsNullOrWhiteSpace(s.Sequence) ? "" : " #" + s.Sequence)))
                    </div>
                </div>
            </p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; }

    private List<BookSeries> _selectValue = new();
    [Parameter]
    public List<BookSeries> SelectValue
    {
        get => _selectValue.Count > 0 ? _selectValue : MetadataValue.OrderByDescending(s => s.Series.Name).ToList();
        set
        {
            if (!Equals(_selectValue, value))
            {
                _selectValue = value;
                SelectValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<List<BookSeries>> SelectValueChanged { get; set; }

    [Parameter]
    public List<Series> ExistingValues { get; set; }

    [Parameter]
    public List<BookSeries> MetadataValue { get; set; }

    async Task ShowAddEditBookSeriesDialog(Data.BookSeries bookSeries = null)
    {
        var parameters = new DialogParameters
            {
                ["Series"] = bookSeries?.Series.Name ?? "",
                ["Sequence"] = bookSeries?.Sequence ?? "",
                ["IsNewBookSeries"] = bookSeries == null,
                ["ExistingSeries"] = ExistingValues
            };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };

        var dialog = await _dialog.ShowAsync<AddEditBookSeries>(bookSeries == null ? "New Series" : "Edit Series", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newSeries = (BookSeries)result.Data;
            var series = ExistingValues.FirstOrDefault(s => s.Name == newSeries.Series.Name)
                         ?? new Series(newSeries.Series.Name);

            if (!ExistingValues.Contains(series))
            {
                ExistingValues.Add(series);
            }

            var updatedList = SelectValue.ToList();
            if (bookSeries != null)
            {
                updatedList = updatedList
                    .Where(s => !(s.Series.Name == bookSeries.Series.Name && s.Sequence == bookSeries.Sequence))
                    .ToList();
            }

            updatedList.Add(new BookSeries(series, newSeries.Sequence));
            SelectValue = updatedList;
        }
    }

    void RemoveSelectedOption(MudChip chip)
    {
        var toRemove = (BookSeries)chip.Value;
        SelectValue = SelectValue
            .Where(s => !(s.Series.Name == toRemove.Series.Name && s.Sequence == toRemove.Sequence))
            .ToList();
    }
}
