@page "/Classifications"

<PageTitle>Classifications</PageTitle>

@using Anthology.Data
@using Anthology.Data.DB
@using Anthology.Services
@inject Anthology.Services.IClassificationService classificationService
@inject MudBlazor.ISnackbar snackBar

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Classifications</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="classification.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudSelect @bind-Value="classification.Type" T="Classification.ClassificationType" Label="Type" AnchorOrigin="Origin.BottomCenter">
            @foreach (var option in Enum.GetValues(typeof(Classification.ClassificationType)).Cast<Classification.ClassificationType>())
            {
                <MudSelectItem Value="@option">@option.ToString()</MudSelectItem>
            }
        </MudSelect>
        <MudText Typo="Typo.body1">Aliases</MudText>
        @foreach (var alias in classification.Aliases)
        {
            <MudTextField @bind-Value="alias.Name" Label="Alias" Variant="Variant.Text" Margin="Margin.Normal" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Delete" OnAdornmentClick="@(() => DeleteAlias(alias))" AdornmentAriaLabel="Delete Alias"></MudTextField>
        }
        <MudIconButton Icon="@Icons.Filled.Add" Color="Color.Primary" OnClick="AddAlias">Add Alias</MudIconButton>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Classification</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetClassifications()" Filter="new Func<Classification, bool>(Search)" @bind-classification="classification">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Classifications</MudText>
        <MudSpacer  />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Classifications..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Aliases</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type.ToString()</MudTd>
        <MudTd DataLabel="Aliases">@String.Join(", ", context.Aliases.Select(a => a.Name))</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.ID))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.ID))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private string searchString = "";
    private Classification classification = new Classification();
    private List<Classification> classifications = new List<Classification>();

    protected override async Task OnInitializedAsync()
    {
        GetClassifications();
    }

    private List<Classification> GetClassifications()
    {
        classifications = classificationService.GetClassifications();
        return classifications;
    }

    private bool Search(Classification classification)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (classification.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || String.Join(" ", classification.Aliases).Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private void Save()
    {
        classificationService.SaveClassification(classification);
        classification = new Classification();
        snackBar.Add("Classification Saved.", Severity.Success);
        GetClassifications();
    }
    private void Edit(Guid id)
    {
        classification = classifications.FirstOrDefault(c => c.ID == id);
    }
    private void Delete(Guid id)
    {
        classificationService.DeleteClassification(id);
        snackBar.Add("Classification Deleted.", Severity.Success);
        GetClassifications();
    }

    protected async Task AddAlias()
    {
        classification.Aliases.Add(new ClassificationAlias());
    }

    protected async Task DeleteAlias(ClassificationAlias item)
    {
        classification.Aliases.Remove(item);
    }
}
