@page "/Books/Match/{matchSource}"
@inject IJSRuntime js

<PageTitle>Match @matchSource</PageTitle>

@using Anthology.Data
@using Anthology.Data.DB
@using Anthology.Services

<h1>Match @matchSource</h1>

<div class="form-group" style="margin-bottom: 8px;">
    <button class="btn btn-secondary" @onclick="@(() => SkipBook())">Skip Book</button>
</div>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else if (books.Count == 0)
{
    <text>No Books Found.</text>
}
else
{
    @foreach (var book in books)
    {
        <div class="card" style="width: 100%;">
            <div class="card-body">
                <h5 class="card-title">@book.Title</h5>
                <h6 class="card-subtitle mb-2 text-muted">@book.ISBN</h6>
                <p class="card-text">@String.Join(", ", book.Authors.Select(a => a.Name))</p>
                <p class="card-text">@book.ReadarrMatch().seriesTitle</p>
                <button class="btn btn-secondary" @onclick="@(() => SetNone(book))">None</button>
                <div class="book-matches" style="padding: 1rem 0rem 1rem 1rem; white-space: nowrap; overflow-y: hidden; overflow-x: auto; max-width: calc(100vw - 340px);">
                    @foreach (var match in book.Matches(matchSource))
                    {
                        <div class="card-container" style="width: 18rem; display: inline-block; margin-right: 1rem;">
                            <div class="card" style="white-space: normal;">
                                <img src="@match.Image" class="card-img-top">
                                <div class="card-body">
                                    <h5 class="card-title">@match.Title</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@match.Identifier</h6>
                                    <p class="card-text">@match.Authors</p>
                                    <p class="card-text">@match.Series</p>
                                    <button class="btn btn-primary" @onclick="@(() => MatchBook(book,match.Identifier))">Select Match</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public string matchSource { get; set; }
    private List<Book>? books;
    private int numberToTake;
    private int numberToSkip;

    protected override async Task OnInitializedAsync()
    {
        numberToTake = 1;
        numberToSkip = 0;
    }

    protected async override Task OnParametersSetAsync()
    {
        books = await GetBooks();
    }

    protected async Task<List<Book>> GetBooks()
    {
        var booksToMatch = await BookService.FetchBooksToMatch(matchSource, numberToTake, numberToSkip);

        if (booksToMatch.Count != 0 && numberToTake == 1 && booksToMatch.First().Matches(matchSource).Count == 0)
        {
            numberToSkip++;
            return await GetBooks();
        }
        else
        {
            return booksToMatch;
        }
    }

    protected async Task SkipBook()
    {
        numberToSkip++;
        books = null;
        books = await GetBooks();
    }

    protected async Task SetNone(Book book)
    {
        if(matchSource == "Audible") book.AudibleExists = false;
        if(matchSource == "AudiobookGuild") book.AudiobookGuildExists = false;
        await BookService.Put(book);
        books = null;
        books = await GetBooks();
    }

    protected async Task MatchBook(Book book, string bookIdentifier)
    {
        if(matchSource == "Audible") book.ASIN = bookIdentifier;
        if (matchSource == "AudiobookGuild") book.AGID = bookIdentifier;
        await BookService.Put(book);
        books = null;
        books = await GetBooks();
    }
}
