@page "/Books"

<PageTitle>Books</PageTitle>

@using Anthology.Data
@using Anthology.Data.DB
@using Anthology.Services
@using Anthology.Utils
@inject Anthology.Services.IBookService bookService
@inject Anthology.Services.IAudiobookShelfService audiobookshelfService
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService

<style>
    .mud-table-toolbar {
        height: 135px;
    }
</style>

<MudTable Items="@books" Filter="new Func<Book, bool>(Search)" @bind-book="book">
    <ToolBarContent>
        <div style="width:100%;">
            <MudToolBar>
                <MudText Typo="Typo.h6">Books</MudText>
                <MudIconButton Icon="@Icons.Material.Outlined.Add" @onclick="(() => Edit(null))" />
                <MudIconButton Icon="@Icons.Filled.ArrowDownward" @onclick="ImportBooks" />
                <MudIconButton Icon="@Icons.Filled.Refresh" @onclick="GetMissingBookMetadata" />
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search for Books..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudToolBar>
            <MudToolBar>
                <MudSlider Class="pa-4 mr-6" Style="width: 100px;" TickMarks="true" TickMarkLabels="@StatusFilterLabels" Min="-1" Max="1" Step="1" @bind-Value="@GRIDStatusFilter">GRID</MudSlider>
                <MudSlider Class="pa-4 mr-6" Style="width: 100px;" TickMarks="true" TickMarkLabels="@StatusFilterLabels" Min="-1" Max="1" Step="1" @bind-Value="@ASINStatusFilter">ASIN</MudSlider>
                <MudSlider Class="pa-4 mr-6" Style="width: 100px;" TickMarks="true" TickMarkLabels="@StatusFilterLabels" Min="-1" Max="1" Step="1" @bind-Value="@AGIDStatusFilter">AGID</MudSlider>
                <MudSelect @bind-Value="authorFilter" Label="Author Source" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@AuthorFilterEnum.All">All</MudSelectItem>
                    <MudSelectItem Value="@AuthorFilterEnum.Audible">Audible</MudSelectItem>
                    <MudSelectItem Value="@AuthorFilterEnum.AudiobookGuild">Audiobook Guild</MudSelectItem>
                </MudSelect>
                <MudSelect @bind-Value="libraryFilter" Label="Library Status" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@LibraryFilterEnum.All">All</MudSelectItem>
                    <MudSelectItem Value="@LibraryFilterEnum.Exist">In Library</MudSelectItem>
                    <MudSelectItem Value="@LibraryFilterEnum.Missing">Missing</MudSelectItem>
                </MudSelect>
                <MudSwitch @bind-Checked="@HideFetched" Label="Hide Fetched" Color="Color.Info" />
                <MudSwitch @bind-Checked="@ShowDuplicates" Label="Show Duplicates" Color="Color.Info" />
            </MudToolBar>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>ISBN</MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Book, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy='new Func<Book, object>(x => string.Join(",", x.Authors.Select(a => a.Name)))'>Authors</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy='new Func<Book, object>(x => string.Join(",", x.Series.Select(s => s.Name + ": " + s.Sequence)))'>Series</MudTableSortLabel></MudTh>
        <MudTh>GRID</MudTh>
        <MudTh>ASIN</MudTh>
        <MudTh>AGID</MudTh>
        <MudTh> </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="InLibrary">
            @if (audiobookshelfService.IsBookInLibrary(@context.ISBN))
            {
                <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Circle" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="ISBN">@context.ISBN</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Authors">@String.Join(", ", context.Authors.Select(a => a.Name))</MudTd>
        <MudTd DataLabel="Series">@String.Join(", ", context.Series.Any() ? context.Series.Select(s => s.Name + ": " + s.Sequence) : context.BookMetadata.Series.Select(s => s.Name + ": " + s.Sequence))</MudTd>
        <MudTd DataLabel="GRID">
            @if (!string.IsNullOrWhiteSpace(@context.GRID))
            {
                <MudIconButton Icon="@Icons.Filled.Check" Size="Size.Small" @onclick="@(()=>Match("Goodreads", @context.ISBN))" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Filled.Remove" Size="Size.Small" @onclick="@(()=>Match("Goodreads", @context.ISBN))" />
            }
        </MudTd>
        <MudTd DataLabel="ASIN">
            @if (!string.IsNullOrWhiteSpace(@context.ASIN))
            {
                <MudIconButton Icon="@Icons.Filled.Check" Size="Size.Small" @onclick="@(()=>Match("Audible", @context.ISBN))" />
            }
            else if (!@context.AudibleExists)
            {
                <MudIcon Icon="@Icons.Filled.Close" Size="Size.Small" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Filled.Remove" Size="Size.Small" @onclick="@(()=>Match("Audible", @context.ISBN))" />
            }
        </MudTd>
        <MudTd DataLabel="AGID">
            @if (!string.IsNullOrWhiteSpace(@context.AGID))
            {
                <MudIconButton Icon="@Icons.Filled.Check" Size="Size.Small" @onclick="@(()=>Match("AudiobookGuild", @context.ISBN))" />
            }
            else if (!@context.AudiobookGuildExists || !@context.Authors.Any(a => AudiobookGuild.AGAuthors.Contains(a.Name)))
            {
                <MudIcon Icon="@Icons.Filled.Close" Size="Size.Small" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Filled.Remove" Size="Size.Small" @onclick="@(()=>Match("AudiobookGuild", @context.ISBN))" />
            }
        </MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.ISBN))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.ISBN))" Color="Color.Dark" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>hiddenBooks.Add(@context))" Color="Color.Default" Icon="@Icons.Filled.RemoveRedEye" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private string searchString = "";
    private List<Book> hiddenBooks = new List<Book>();
    private int GRIDStatusFilter = 0;
    private int ASINStatusFilter = 0;
    private int AGIDStatusFilter = 0;
    private string[] StatusFilterLabels = new string[] { "Missing", "", "Matched" };
    private AuthorFilterEnum authorFilter = AuthorFilterEnum.All;
    private LibraryFilterEnum libraryFilter = LibraryFilterEnum.All;
    private bool HideFetched = false;
    private bool ShowDuplicates = false;

    private Book book = new Book();
    private List<Book> books = new List<Book>();

    protected override async Task OnInitializedAsync()
    {
        GetBooks();
    }

    private async Task ImportBooks()
    {
        await ImportService.Run();
        GetBooks();
    }

    private async Task GetBooks()
    {
        books = bookService.GetBooks();
        StateHasChanged();
    }

    private bool Search(Book book)
    {
        if (hiddenBooks.Contains(book)) return false;

        if (GRIDStatusFilter == -1 && !string.IsNullOrWhiteSpace(book.GRID)) return false;
        if (GRIDStatusFilter == 1 && string.IsNullOrWhiteSpace(book.GRID)) return false;

        if (ASINStatusFilter == -1 && (!string.IsNullOrWhiteSpace(book.ASIN) || !book.AudibleExists)) return false;
        if (ASINStatusFilter == 1 && string.IsNullOrWhiteSpace(book.ASIN)) return false;

        if (AGIDStatusFilter == -1 && (!string.IsNullOrWhiteSpace(book.AGID) || !book.AudiobookGuildExists || !book.Authors.Any(a => AudiobookGuild.AGAuthors.Contains(a.Name)))) return false;
        if (AGIDStatusFilter == 1 && string.IsNullOrWhiteSpace(book.AGID)) return false;

        if (authorFilter == AuthorFilterEnum.Audible && book.Authors.Any(a => AudiobookGuild.AGAuthors.Contains(a.Name))) return false;
        if (authorFilter == AuthorFilterEnum.AudiobookGuild && !book.Authors.Any(a => AudiobookGuild.AGAuthors.Contains(a.Name))) return false;

        if (libraryFilter == LibraryFilterEnum.Exist && !audiobookshelfService.IsBookInLibrary(book.ISBN)) return false;
        if (libraryFilter == LibraryFilterEnum.Missing && audiobookshelfService.IsBookInLibrary(book.ISBN)) return false;

        if (HideFetched && !(book.DateFetchedMetadata == null || book.DateFetchedMetadata > DateTime.Now.AddDays(30))) return false;

        if (ShowDuplicates && (string.IsNullOrWhiteSpace(book.GRID) || !(books.Select(b => b.GRID).Where(b => b == book.GRID).Count() > 1))) return false;

        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (book.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || (book.Subtitle != null && book.Subtitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            || (book.Authors.Count > 0 && String.Join(" ", book.Authors.Select(i => i.Name)).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            || (book.Narrators.Count > 0 && String.Join(" ", book.Narrators.Select(i => i.Name)).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            || (book.Series.Count > 0 && String.Join(" ", book.Series.Select(i => i.Name)).Contains(searchString, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }
        return false;
    }

    private async void Edit(string isbn)
    {
        var book = isbn == null ? new Book() : books.FirstOrDefault(b => b.ISBN == isbn);
        var parameters = new DialogParameters { ["book"] = book };
        var options = new DialogOptions() { FullWidth = false, CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.Show<EditBook>(isbn == null ? "New Book" : "Edit " + book.ISBN, parameters, options).Result;

        GetBooks();
    }

    private void Delete(string isbn)
    {
        bookService.DeleteBook(isbn);
        snackBar.Add("Book Deleted.", Severity.Success);
        GetBooks();
    }

    private async void Match(string source, string isbn)
    {
        var book = books.FirstOrDefault(b => b.ISBN == isbn);
        var parameters = new DialogParameters { ["book"] = book, ["matchSource"] = source };
        var options = new DialogOptions() { FullWidth = true, CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.False };
        var dialog = await DialogService.Show<MatchBook>(isbn == null ? "New Book" : "Edit " + book.Title, parameters, options).Result;

        if (!dialog.Cancelled) GetBooks();
    }

    protected async Task GetMissingBookMetadata()
    {
        bookService.GetMissingBookMetadata();
        snackBar.Add("All Books Fetched.", Severity.Success);
    }

    private enum AuthorFilterEnum
    {
        All,
        Audible,
        AudiobookGuild
    }

    private enum LibraryFilterEnum
    {
        All,
        Exist,
        Missing
    }
}
