// <auto-generated />
using System;
using Anthology.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Anthology.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Anthology.Data.AudiobookCover", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("AudiobookCover");
                });

            modelBuilder.Entity("Anthology.Data.Book", b =>
                {
                    b.Property<string>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookMetadataJson")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateFetchedMetadata")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SubtitleLock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ISBN");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Anthology.Data.BookCover", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("BookCover");
                });

            modelBuilder.Entity("Anthology.Data.BookIdentifier", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("BookIdentifier");
                });

            modelBuilder.Entity("Anthology.Data.BookImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("BookImage");
                });

            modelBuilder.Entity("Anthology.Data.BookSeries", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sequence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SeriesID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.HasIndex("SeriesID");

                    b.ToTable("BookSeries");
                });

            modelBuilder.Entity("Anthology.Data.Classification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SeriesID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.HasIndex("SeriesID");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Anthology.Data.ClassificationAlias", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClassificationID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ClassificationID");

                    b.ToTable("ClassificationAlias");
                });

            modelBuilder.Entity("Anthology.Data.Download", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("Anthology.Data.DownloadAuthor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DownloadID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DownloadID");

                    b.ToTable("DownloadAuthor");
                });

            modelBuilder.Entity("Anthology.Data.FieldPriorities", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MergeCovers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MergeGenres")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MergeTags")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("FieldPriorities");
                });

            modelBuilder.Entity("Anthology.Data.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Anthology.Data.PersonAlias", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PersonID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonAlias");
                });

            modelBuilder.Entity("Anthology.Data.PersonImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonImage");
                });

            modelBuilder.Entity("Anthology.Data.PluginSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PluginName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SettingsID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SettingsID");

                    b.ToTable("PluginSetting");
                });

            modelBuilder.Entity("Anthology.Data.Series", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Anthology.Data.SeriesAlias", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SeriesID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SeriesID");

                    b.ToTable("SeriesAlias");
                });

            modelBuilder.Entity("Anthology.Data.SettingKV", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PluginSettingID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PluginSettingID");

                    b.ToTable("SettingKV");
                });

            modelBuilder.Entity("Anthology.Data.Settings", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldPrioritiesID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("FieldPrioritiesID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Anthology.Data.SourcePriority", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID10")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID11")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID12")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID2")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID3")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID4")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID5")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID6")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID7")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID8")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldPrioritiesID9")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("FieldPrioritiesID");

                    b.HasIndex("FieldPrioritiesID1");

                    b.HasIndex("FieldPrioritiesID10");

                    b.HasIndex("FieldPrioritiesID11");

                    b.HasIndex("FieldPrioritiesID12");

                    b.HasIndex("FieldPrioritiesID2");

                    b.HasIndex("FieldPrioritiesID3");

                    b.HasIndex("FieldPrioritiesID4");

                    b.HasIndex("FieldPrioritiesID5");

                    b.HasIndex("FieldPrioritiesID6");

                    b.HasIndex("FieldPrioritiesID7");

                    b.HasIndex("FieldPrioritiesID8");

                    b.HasIndex("FieldPrioritiesID9");

                    b.ToTable("SourcePriority");
                });

            modelBuilder.Entity("BookPerson", b =>
                {
                    b.Property<Guid>("AuthorsID")
                        .HasColumnType("TEXT");

                    b.Property<string>("BooksAuthoredISBN")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorsID", "BooksAuthoredISBN");

                    b.HasIndex("BooksAuthoredISBN");

                    b.ToTable("BookPerson");
                });

            modelBuilder.Entity("BookPerson1", b =>
                {
                    b.Property<string>("BooksNarratedISBN")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NarratorsID")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksNarratedISBN", "NarratorsID");

                    b.HasIndex("NarratorsID");

                    b.ToTable("BookPerson1");
                });

            modelBuilder.Entity("Anthology.Data.AudiobookCover", b =>
                {
                    b.HasOne("Anthology.Data.Book", "Book")
                        .WithMany("AudiobookCovers")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.BookCover", b =>
                {
                    b.HasOne("Anthology.Data.Book", "Book")
                        .WithMany("BookCovers")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.BookIdentifier", b =>
                {
                    b.HasOne("Anthology.Data.Book", "Book")
                        .WithMany("Identifiers")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.BookImage", b =>
                {
                    b.HasOne("Anthology.Data.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.BookSeries", b =>
                {
                    b.HasOne("Anthology.Data.Book", "Book")
                        .WithMany("Series")
                        .HasForeignKey("BookISBN");

                    b.HasOne("Anthology.Data.Series", "Series")
                        .WithMany("BooksJoin")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Anthology.Data.Classification", b =>
                {
                    b.HasOne("Anthology.Data.Book", null)
                        .WithMany("Classifications")
                        .HasForeignKey("BookISBN");

                    b.HasOne("Anthology.Data.Series", null)
                        .WithMany("Classifications")
                        .HasForeignKey("SeriesID");
                });

            modelBuilder.Entity("Anthology.Data.ClassificationAlias", b =>
                {
                    b.HasOne("Anthology.Data.Classification", null)
                        .WithMany("Aliases")
                        .HasForeignKey("ClassificationID");
                });

            modelBuilder.Entity("Anthology.Data.Download", b =>
                {
                    b.HasOne("Anthology.Data.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.DownloadAuthor", b =>
                {
                    b.HasOne("Anthology.Data.Download", null)
                        .WithMany("Author")
                        .HasForeignKey("DownloadID");
                });

            modelBuilder.Entity("Anthology.Data.PersonAlias", b =>
                {
                    b.HasOne("Anthology.Data.Person", null)
                        .WithMany("Aliases")
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("Anthology.Data.PersonImage", b =>
                {
                    b.HasOne("Anthology.Data.Person", "Person")
                        .WithMany("Images")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Anthology.Data.PluginSetting", b =>
                {
                    b.HasOne("Anthology.Data.Settings", null)
                        .WithMany("PluginSettings")
                        .HasForeignKey("SettingsID");
                });

            modelBuilder.Entity("Anthology.Data.SeriesAlias", b =>
                {
                    b.HasOne("Anthology.Data.Series", null)
                        .WithMany("Aliases")
                        .HasForeignKey("SeriesID");
                });

            modelBuilder.Entity("Anthology.Data.SettingKV", b =>
                {
                    b.HasOne("Anthology.Data.PluginSetting", null)
                        .WithMany("Settings")
                        .HasForeignKey("PluginSettingID");
                });

            modelBuilder.Entity("Anthology.Data.Settings", b =>
                {
                    b.HasOne("Anthology.Data.FieldPriorities", "FieldPriorities")
                        .WithMany()
                        .HasForeignKey("FieldPrioritiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldPriorities");
                });

            modelBuilder.Entity("Anthology.Data.SourcePriority", b =>
                {
                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Authors")
                        .HasForeignKey("FieldPrioritiesID");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Covers")
                        .HasForeignKey("FieldPrioritiesID1");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Subtitle")
                        .HasForeignKey("FieldPrioritiesID10");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Tags")
                        .HasForeignKey("FieldPrioritiesID11");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Title")
                        .HasForeignKey("FieldPrioritiesID12");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Description")
                        .HasForeignKey("FieldPrioritiesID2");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Genres")
                        .HasForeignKey("FieldPrioritiesID3");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("IsExplicit")
                        .HasForeignKey("FieldPrioritiesID4");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Language")
                        .HasForeignKey("FieldPrioritiesID5");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Narrators")
                        .HasForeignKey("FieldPrioritiesID6");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("PublishDate")
                        .HasForeignKey("FieldPrioritiesID7");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Publisher")
                        .HasForeignKey("FieldPrioritiesID8");

                    b.HasOne("Anthology.Data.FieldPriorities", null)
                        .WithMany("Series")
                        .HasForeignKey("FieldPrioritiesID9");
                });

            modelBuilder.Entity("BookPerson", b =>
                {
                    b.HasOne("Anthology.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("AuthorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksAuthoredISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPerson1", b =>
                {
                    b.HasOne("Anthology.Data.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksNarratedISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("NarratorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Anthology.Data.Book", b =>
                {
                    b.Navigation("AudiobookCovers");

                    b.Navigation("BookCovers");

                    b.Navigation("Classifications");

                    b.Navigation("Identifiers");

                    b.Navigation("Images");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Anthology.Data.Classification", b =>
                {
                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("Anthology.Data.Download", b =>
                {
                    b.Navigation("Author");
                });

            modelBuilder.Entity("Anthology.Data.FieldPriorities", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Covers");

                    b.Navigation("Description");

                    b.Navigation("Genres");

                    b.Navigation("IsExplicit");

                    b.Navigation("Language");

                    b.Navigation("Narrators");

                    b.Navigation("PublishDate");

                    b.Navigation("Publisher");

                    b.Navigation("Series");

                    b.Navigation("Subtitle");

                    b.Navigation("Tags");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Anthology.Data.Person", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Anthology.Data.PluginSetting", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Anthology.Data.Series", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("BooksJoin");

                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("Anthology.Data.Settings", b =>
                {
                    b.Navigation("PluginSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
