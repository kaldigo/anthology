// <auto-generated />
using System;
using Anthology.Data.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Anthology.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221001151735_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Anthology.Data.DB.AudiobookCover", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("AudiobookCover");
                });

            modelBuilder.Entity("Anthology.Data.DB.Book", b =>
                {
                    b.Property<string>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AGID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ASIN")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AudibleExists")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AudiobookGuildExists")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GRID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ISBN");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookAuthor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookCover", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("BookCover");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookFunnel", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Extracted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExtractedPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipPath")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("BookFunnelItems");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookGenre", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookISBN");

                    b.ToTable("BookImage");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookNarrator", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("BookNarrator");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookSeries", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float?>("Sequence")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("BookSeries");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("Anthology.Data.DB.Classification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Anthology.Data.DB.ClassificationAlias", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClassificationID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ClassificationID");

                    b.ToTable("ClassificationAlias");
                });

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.Property<Guid>("AuthorsID")
                        .HasColumnType("TEXT");

                    b.Property<string>("BooksISBN")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorsID", "BooksISBN");

                    b.HasIndex("BooksISBN");

                    b.ToTable("BookBookAuthor");
                });

            modelBuilder.Entity("BookBookGenre", b =>
                {
                    b.Property<string>("BooksISBN")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenresID")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksISBN", "GenresID");

                    b.HasIndex("GenresID");

                    b.ToTable("BookBookGenre");
                });

            modelBuilder.Entity("BookBookNarrator", b =>
                {
                    b.Property<string>("BooksISBN")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NarratorsID")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksISBN", "NarratorsID");

                    b.HasIndex("NarratorsID");

                    b.ToTable("BookBookNarrator");
                });

            modelBuilder.Entity("BookBookSeries", b =>
                {
                    b.Property<string>("BooksISBN")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SeriesID")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksISBN", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("BookBookSeries");
                });

            modelBuilder.Entity("BookBookTag", b =>
                {
                    b.Property<string>("BooksISBN")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagsID")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksISBN", "TagsID");

                    b.HasIndex("TagsID");

                    b.ToTable("BookBookTag");
                });

            modelBuilder.Entity("Anthology.Data.DB.AudiobookCover", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", "Book")
                        .WithMany("AudiobookCovers")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookCover", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", "Book")
                        .WithMany("BookCovers")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.DB.BookImage", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookISBN");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Anthology.Data.DB.ClassificationAlias", b =>
                {
                    b.HasOne("Anthology.Data.DB.Classification", null)
                        .WithMany("Aliases")
                        .HasForeignKey("ClassificationID");
                });

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.HasOne("Anthology.Data.DB.BookAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.DB.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBookGenre", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.DB.BookGenre", null)
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBookNarrator", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.DB.BookNarrator", null)
                        .WithMany()
                        .HasForeignKey("NarratorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBookSeries", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.DB.BookSeries", null)
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookBookTag", b =>
                {
                    b.HasOne("Anthology.Data.DB.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anthology.Data.DB.BookTag", null)
                        .WithMany()
                        .HasForeignKey("TagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Anthology.Data.DB.Book", b =>
                {
                    b.Navigation("AudiobookCovers");

                    b.Navigation("BookCovers");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Anthology.Data.DB.Classification", b =>
                {
                    b.Navigation("Aliases");
                });
#pragma warning restore 612, 618
        }
    }
}
